
Procedure6A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  000002d4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080020e  0080020e  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9f  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce2  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000578  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000105  00000000  00000000  00002cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ed       	ldi	r30, 0xD4	; 212
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	d7 c0       	rjmp	.+430    	; 0x2d0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <uart_putchar>:
	value = (upper << 8) | lower;;		// combine the upper and lower bits here to form a 10-bit number

	ADCSRA = ADCSRA | 0x10;	// clear the conversion flag
	
	return value;			// send back the 10-bit result
}
 124:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 128:	95 ff       	sbrs	r25, 5
 12a:	fc cf       	rjmp	.-8      	; 0x124 <uart_putchar>
 12c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret

00000136 <uart_getch>:
 136:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 13a:	88 23       	and	r24, r24
 13c:	e4 f7       	brge	.-8      	; 0x136 <uart_getch>
 13e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret

00000146 <init_UART>:
 146:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 156:	87 e6       	ldi	r24, 0x67	; 103
 158:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 15c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 160:	ee e0       	ldi	r30, 0x0E	; 14
 162:	f2 e0       	ldi	r31, 0x02	; 2
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	93 83       	std	Z+3, r25	; 0x03
 16a:	82 83       	std	Z+2, r24	; 0x02
 16c:	91 83       	std	Z+1, r25	; 0x01
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <init_ADC>:
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
 17a:	80 81       	ld	r24, Z
 17c:	80 83       	st	Z, r24
 17e:	80 81       	ld	r24, Z
 180:	80 62       	ori	r24, 0x20	; 32
 182:	80 83       	st	Z, r24
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <read_ADC_channel>:
 194:	ec e7       	ldi	r30, 0x7C	; 124
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	90 81       	ld	r25, Z
 19a:	90 7e       	andi	r25, 0xE0	; 224
 19c:	90 83       	st	Z, r25
 19e:	90 81       	ld	r25, Z
 1a0:	89 2b       	or	r24, r25
 1a2:	80 83       	st	Z, r24
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
 1ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 1b2:	84 ff       	sbrs	r24, 4
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <read_ADC_channel+0x1a>
 1b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1ba:	ea e7       	ldi	r30, 0x7A	; 122
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	90 81       	ld	r25, Z
 1c0:	90 61       	ori	r25, 0x10	; 16
 1c2:	90 83       	st	Z, r25
 1c4:	08 95       	ret

000001c6 <init_ADC_for_10bits>:
 1c6:	ec e7       	ldi	r30, 0x7C	; 124
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	80 83       	st	Z, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	80 83       	st	Z, r24
 1d8:	ea e7       	ldi	r30, 0x7A	; 122
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	80 83       	st	Z, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <main>:
{
	uint16_t red;
	uint16_t green;
	uint16_t blue;
	
	DDRE = 0xFF;	// initialize OCR0A as output
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8d b9       	out	0x0d, r24	; 13
	DDRC = 0x00;	// start with the port low
 1ec:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;	// setup Port C for input
 1ee:	88 b9       	out	0x08, r24	; 8

	init_UART();		// initialize the UART for 9600, N, 8, 1
 1f0:	aa df       	rcall	.-172    	; 0x146 <init_UART>
	init_ADC();
 1f2:	bf df       	rcall	.-130    	; 0x172 <init_ADC>
	init_ADC_for_10bits();
 1f4:	e8 df       	rcall	.-48     	; 0x1c6 <init_ADC_for_10bits>
 1f6:	a0 e9       	ldi	r26, 0x90	; 144

	TCCR3A = 0x01;		// fast PWM
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	8c 93       	st	X, r24
 1fe:	e1 e9       	ldi	r30, 0x91	; 145
	TCCR3B = 0x08;		// fast PWM
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	80 83       	st	Z, r24
 206:	8c 91       	ld	r24, X

	TCCR3A = TCCR3A | 0xfc;		// set on match
 208:	8c 6f       	ori	r24, 0xFC	; 252
 20a:	8c 93       	st	X, r24
 20c:	80 81       	ld	r24, Z
	TCCR3B = TCCR3B | 0x04;		// set frequency to 256 Hz from clock prescale
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	80 83       	st	Z, r24

	while(1)
	{
		red = read_ADC_channel(0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	bf df       	rcall	.-130    	; 0x194 <read_ADC_channel>
 216:	08 2f       	mov	r16, r24
 218:	10 e0       	ldi	r17, 0x00	; 0
		green = read_ADC_channel(1);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	bb df       	rcall	.-138    	; 0x194 <read_ADC_channel>
 21e:	c8 2f       	mov	r28, r24
 220:	d0 e0       	ldi	r29, 0x00	; 0
		blue = read_ADC_channel(2);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	b7 df       	rcall	.-146    	; 0x194 <read_ADC_channel>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
		
		OCR3A = red;		
 22c:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 230:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
		OCR3B = green;
 234:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 238:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
		OCR3C = blue;
 23c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
 240:	86 b1       	in	r24, 0x06	; 6
		
		switch(PINC)
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	c1 f0       	breq	.+48     	; 0x276 <main+0x8e>
 246:	18 f4       	brcc	.+6      	; 0x24e <main+0x66>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	31 f0       	breq	.+12     	; 0x258 <main+0x70>
 24c:	e2 cf       	rjmp	.-60     	; 0x212 <main+0x2a>
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	09 f1       	breq	.+66     	; 0x294 <main+0xac>
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	71 f1       	breq	.+92     	; 0x2b2 <main+0xca>
 256:	dd cf       	rjmp	.-70     	; 0x212 <main+0x2a>
 258:	8f ef       	ldi	r24, 0xFF	; 255
		{
			case 1:
			OCR3A = 255;
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 260:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 264:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
			OCR3B = 0;
 268:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 26c:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
			OCR3C = 0;
 270:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
 274:	ce cf       	rjmp	.-100    	; 0x212 <main+0x2a>
			break;
 276:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
			
			case 2:
			OCR3A = 0;
 27a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 27e:	8f ef       	ldi	r24, 0xFF	; 255
			OCR3B = 255;
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 286:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 28a:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
			OCR3C = 0;
 28e:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
 292:	bf cf       	rjmp	.-130    	; 0x212 <main+0x2a>
			break;
 294:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
			
			case 4:
			OCR3A = 0;
 298:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 29c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
			OCR3B = 0;
 2a0:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
			OCR3C = 255;
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
 2ac:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
 2b0:	b0 cf       	rjmp	.-160    	; 0x212 <main+0x2a>
			break;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
			
			case 8:
			OCR3A = 255;
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 2ba:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 2be:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
			OCR3B = 255;
 2c2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 2c6:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
			OCR3C = 255;
 2ca:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
 2ce:	a1 cf       	rjmp	.-190    	; 0x212 <main+0x2a>

000002d0 <_exit>:
			break;
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
